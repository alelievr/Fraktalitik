using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Linq;
using System;
using UnityEngine.Networking;

public static class Cluster
{
	public static string	clusterNumber = "1";
	public static string	noImac = "--.--";

	public static string[,] clusterIPPartMap = {
		{"13.01", "13.02", "13.03", "13.04", "13.05", "13.06", "13.07", "--.--", "--.--", "--.--", "--.--", "--.--", "--.--", "--.--", "--.--", "--.--", "--.--", "--.--", "13.08", "13.09", "13.10", "13.11", "13.12", "13.13", "13.14"}, //r13
		{"12.01", "12.02", "12.03", "12.04", "12.05", "12.06", "12.07", "--.--", "12.08", "12.09", "12.10", "12.11", "12.12", "12.13", "12.14", "12.15", "12.16", "--.--", "12.17", "12.18", "12.19", "12.20", "12.21", "12.22", "12.23"}, //r12
		{"11.01", "11.02", "11.03", "11.04", "11.05", "11.06", "11.07", "--.--", "11.08", "11.09", "11.10", "11.11", "11.12", "11.13", "11.14", "11.15", "11.16", "--.--", "11.17", "11.18", "11.19", "11.20", "11.21", "11.22", "11.23"}, //r11
		{"10.01", "10.02", "10.03", "10.04", "10.05", "10.06", "10.07", "--.--", "10.08", "10.09", "10.10", "10.11", "10.12", "10.13", "10.14", "10.15", "10.16", "--.--", "10.17", "10.18", "10.19", "10.20", "10.21", "10.22", "10.23"}, //r10
		{"--.--", "09.02", "09.03", "09.04", "09.05", "09.06", "--.--", "--.--", "--.--", "09.07", "09.08", "09.09", "09.10", "09.11", "09.12", "09.13", "--.--", "--.--", "09.14", "09.15", "09.16", "09.17", "09.18", "09.19", "09.20"}, //r9
		{"08.01", "08.02", "08.03", "08.04", "08.05", "08.06", "--.--", "--.--", "--.--", "08.07", "08.08", "08.09", "08.10", "08.11", "08.12", "08.13", "08.14", "--.--", "08.15", "08.16", "08.17", "08.18", "08.19", "08.20", "08.21"}, //r8
		{"07.01", "07.02", "07.03", "07.04", "07.05", "07.06", "--.--", "--.--", "07.07", "07.08", "07.09", "07.10", "07.11", "07.12", "07.13", "07.14", "07.15", "--.--", "07.16", "07.17", "07.18", "07.19", "07.20", "07.21", "07.22"}, //r7
		{"06.01", "06.02", "06.03", "06.04", "06.05", "06.06", "06.07", "--.--", "--.--", "06.08", "06.09", "06.10", "06.11", "06.12", "06.13", "06.14", "--.--", "--.--", "06.15", "06.16", "06.17", "06.18", "06.19", "06.20", "06.21"}, //r6
		{"05.01", "05.02", "05.03", "05.04", "05.05", "05.06", "05.07", "--.--", "05.08", "05.09", "05.10", "05.11", "05.12", "05.13", "05.14", "05.15", "05.16", "--.--", "05.17", "05.18", "05.19", "05.20", "05.21", "05.22", "05.23"}, //r5
		{"04.01", "04.02", "04.03", "04.04", "04.05", "04.06", "04.07", "--.--", "04.08", "04.09", "04.10", "04.11", "04.12", "04.13", "04.14", "04.15", "04.16", "--.--", "04.17", "04.18", "04.19", "04.20", "04.21", "04.22", "04.23"}, //r4
		{"03.01", "03.02", "03.03", "03.04", "03.05", "03.06", "03.07", "--.--", "--.--", "03.08", "03.09", "03.10", "03.11", "03.12", "03.13", "03.14", "--.--", "--.--", "03.15", "03.16", "03.17", "03.18", "03.19", "03.20", "03.21"}, //r3
		{"02.01", "02.02", "02.03", "02.04", "02.05", "02.06", "02.07", "--.--", "02.08", "02.09", "02.10", "02.11", "02.12", "02.13", "02.14", "02.15", "02.16", "--.--", "02.17", "02.18", "02.19", "02.20", "02.21", "02.22", "02.23"}, //r2
		{"01.01", "01.02", "01.03", "01.04", "01.05", "01.06", "01.07", "--.--", "--.--", "--.--", "--.--", "--.--", "--.--", "--.--", "--.--", "--.--", "--.--", "--.--", "01.08", "01.09", "01.10", "01.11", "01.12", "01.13", "01.14"}, //r1
	};

	public static int		rowCount = 11;

	public readonly static List< IMacInfo >						iMacInfos;
	public readonly static Dictionary< string, IMacInfo >		iMacInfosByIp;
	public static Dictionary< NetworkConnection, IMacInfo >		iMacInfosByConnection;

	static Cluster()
	{
		//Load ImacInfos
		iMacInfos = GetImacInfos().ToList();
		iMacInfosByIp = iMacInfos.ToDictionary(l => l.ip);
	}

	public static void UpdateImacByConnectionDictionary()
	{
		iMacInfosByConnection = iMacInfos.Where(l => l.connection != null).ToDictionary(l => l.connection);
	}

	static IEnumerable< IMacInfo > GetImacInfos()
	{
		int		width = Cluster.clusterIPPartMap.GetLength(1);
		int		row = 13;
		int		seat = 1;
		int		cSeat = 0;

		foreach (var ipPart in clusterIPPartMap)
		{
			IMacInfo	iMac = new IMacInfo();
			
			//reset seat and decrement row
			if (cSeat == width)
			{
				row--;
				seat = 1;
				cSeat = 0;
			}

			iMac.ip = GetIp(ipPart);
			iMac.name = "e" + clusterNumber + "r" + row + "p" + seat;
			iMac.row = row;
			iMac.seat = seat;
			iMac.faceEntrance = (cSeat % 2) == 0;

			iMac.worldPosition = new Vector3(cSeat * 2, 0, row * 2);

			if (ipPart != noImac)
			{
				yield return iMac;
				seat++;
			}
			
			cSeat++;
		}
	}

	public static string GetIp(string ipPart)
	{
		var s = ipPart.Split('.');
		int r;
		int p;

		Int32.TryParse(s[0], out r);
		Int32.TryParse(s[1], out p);

		if (r == 0 || p == 0)
			return null;

		return "10.1" + clusterNumber + "." + r + "." + p;
	}

	public static IEnumerable< string > GetIps()
	{
		foreach (var ipPart in clusterIPPartMap)
			if (ipPart != noImac)
				yield return GetIp(ipPart);
	}

}
